import pandas, mlbgid, matplotlib, numpy, sys, urllib2, datetime, re, csv
from pandas import DataFrame
from pylab import *
import matplotlib.pyplot as plt
from matplotlib.path import Path
from matplotlib.patches import PathPatch
from collections import defaultdict
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup
import sqlite3


def get_game_id(*dates):
#construct a base url and add list dates in a loop
baseURL = 'http://gd2.mlb.com/components/game/mlb/year_'
for date in dates:
year, month, day = date[0:4], date[5:7], date[8:10]
fullurl = baseURL + year + '/month_' + month + '/day_' + day + '/'
#using the dates to find each individual game id for the date and populate a tuple
g_id = []
g_id = [a.text.strip()[4:-1] for a in BeautifulSoup(urllib2.urlopen(fullurl)).find_all('li',text=re.compile("gid_"))]
for g in g_id:
game_id_url = baseURL + g[0:4] + '/month_' + g[5:7] + '/day_' + g[8:10] + '/gid_' + g + '/inning/inning_all.xml'
try:
print ET.parse(urllib2.urlopen(game_id_url))
except:
None

print get_game_id('2014_05_04','2014_05_03')

def db_creation():
conn = sqlite3.connect('baseball.db')
c = conn.cursor()
c.execute('''CREATE TABLE game_ststs(gameid TEXT, away_team TEXT, TEXT home_team TEXT, inningnum INTEGER, score INTEGER, away_team_runs INTEGER, home_team_runs INTEGER, next INTEGER, num INTEGER, b INTEGER, s INTEGER, o INTEGER, start_tfs REAL, start_tfs_zulu REAL, batter INTEGER, battingteam TEXT, stand TEXT, b_height TEXT, pitcher INTEGER, p_throws TEXT, playdes TEXT, esplaydes TEXT, event TEXT, des TEXT, des_es TEXT, id INTEGER, on_1b INTEGER, on_2b INTEGER, on_3b INTEGER, type TEXT, tfs INTEGER, tfs_zulu TEXT, x REAL, y REAL, sv_id TEXT, start_speed REAL, end_speed REAL, sz_top REAL, sz_bot REAL, pfx_x REAL, pfx_z REAL, px REAL, pz REAL, x0 REAL, y0 REAL, z0 REAL, vx0 REAL, vy0 REAL, vz0 REAL, ax REAL,  ay REL, az REAL, break_y REAL, break_angle REAL, break_length REAL, pitch_type TEXT, type_confidence REAL, zone INTEGER, nasty REAL, spin_dir REAL, spin_rate REAL, cc TEXT, mt TEXT)''')
